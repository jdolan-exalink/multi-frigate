# Development Dockerfile for Multi-Frigate Frontend
FROM node:18-alpine

WORKDIR /app

# Install bash and curl for health checks
RUN apk add --no-cache bash curl

# Copy package files first for better caching
COPY package*.json ./

# Create a clean package.json without postinstall script for Docker
RUN node -e "\
  const fs = require('fs'); \
  const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8')); \
  delete pkg.scripts.postinstall; \
  pkg.proxy = 'http://backend:4000'; \
  fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2)); \
  "

# Install dependencies with legacy peer deps for compatibility
RUN npm install --legacy-peer-deps

# Copy source code (this will be overridden by volume in docker-compose)
COPY . .

# Copy environment configuration files
COPY env.sh /app/env.sh
COPY .env.docker /app/.env.docker

# Make env.sh executable and fix line endings
RUN sed -i 's/\r$//' /app/env.sh && chmod +x /app/env.sh

# Modify env.sh to output to public/env-config.js for development
RUN sed -i 's|/usr/share/nginx/html/env-config.js|public/env-config.js|g' /app/env.sh

# Create public directory if it doesn't exist
RUN mkdir -p public

# Generate environment config for development
RUN bash /app/env.sh

# Expose development port
EXPOSE 3000

# Health check for development
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:3000 || exit 1

# Default command for development with hot reload
CMD ["npm", "run", "dev"]